name: 'Destroy infra with Terraform'
on:
  push:
    branches:
    - main
  pull_request: 
    branches:
    - main
jobs:
  scan-terraform-config:
    runs-on: ubuntu-latest
    steps:
        # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
                
    - name: Login to Azure with Service Principal
      uses: Azure/login@v1.4.3
      with:
        # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
    - name: Terraform init azurerm backend
      uses: actions/checkout@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        resource_group_name: tf_state
        container_name: tfstate
        storage_account_name: tfstatestg010
        file_name: terraform.tftstate
    
    # Install the latest version of Terraform CLI
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.7

    
    - name: Terraform Init
      id: init
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      run: |
        # Initialize a new or existing Terraform working directory by creating initial files, 
        # loading any remote state, downloading modules, etc.
        terraform init
        
        # Either use the backend.tf file with the config inside or use the following command line
        # terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT_NAME" \
        #                -backend-config="container_name=$CONTAINER_NAME" \
        #                -backend-config="resource_group_name=$RESOURCE_GROUP_NAME"
  

    - name: Terraform destroy
      run: terraform destroy -auto-approve

